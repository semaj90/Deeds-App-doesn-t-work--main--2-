import fs from 'fs';
import path from 'path';

const drizzleDir = './drizzle';

function processSqlFiles(dir: string) {
  fs.readdirSync(dir).forEach(file => {
    const filePath = path.join(dir, file);
    if (fs.statSync(filePath).isDirectory()) {
      processSqlFiles(filePath); // Recursively process subdirectories
    } else if (file.endsWith('.sql')) {
      let content = fs.readFileSync(filePath, 'utf8');

      // Add IF NOT EXISTS to CREATE TABLE
      content = content.replace(/CREATE TABLE\s+("?\w+"?)\s+\(/g, (match, tableName) => {
        return `CREATE TABLE IF NOT EXISTS ${tableName} (`;
      });

      // Add IF NOT EXISTS to CREATE SEQUENCE
      content = content.replace(/CREATE SEQUENCE\s+("?\w+"?)/g, (match, sequenceName) => {
        return `CREATE SEQUENCE IF NOT EXISTS ${sequenceName}`;
      });

      // Remove identity/auto-increment from non-integer columns
      content = content.replace(/ALTER TABLE ("?\w+"?) ALTER COLUMN ("?\w+"?) ADD GENERATED BY DEFAULT AS IDENTITY[\s\S]*?;/g, (match, table, column) => {
        // Try to detect if the column is not integer (look for SET DATA TYPE text/uuid before this line)
        const prevTypeMatch = content.match(new RegExp(`ALTER TABLE ${table} ALTER COLUMN ${column} SET DATA TYPE (\\w+)`, 'i'));
        if (prevTypeMatch && !['integer', 'int', 'bigint', 'smallint'].includes(prevTypeMatch[1].toLowerCase())) {
          console.warn(`⚠️  Skipping identity for non-integer column: ${table}.${column}`);
          return `-- ${match} -- Skipped: identity not allowed on non-integer columns.`;
        }
        return match;
      });

      // Remove duplicate PRIMARY KEY constraints from CREATE TABLE if already present
      content = content.replace(/,?\s*CONSTRAINT\s+"?(\w+)"?\s+PRIMARY KEY\s*\([^)]+\)/g, (match) => {
        // Remove the constraint from CREATE TABLE, will be added as ALTER TABLE if needed
        return '';
      });

      fs.writeFileSync(filePath, content);
      console.log(`✅ Patched ${filePath}`);
    }
  });
}

if (fs.existsSync(drizzleDir)) {
  processSqlFiles(drizzleDir);
} else {
  console.log(`🟡 Drizzle directory '${drizzleDir}' not found. Skipping patch.`);
}