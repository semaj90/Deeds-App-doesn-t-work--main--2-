<script lang="ts">
  import { onMount } from 'svelte';
  import { page } from '$app/stores';
  import { goto } from '$app/navigation';
  import { invalidate } from '$app/navigation';
  import { writable } from 'svelte/store';
  import EnhancedCaseForm from '$lib/components/EnhancedCaseForm.svelte';
  import TextFragmentManager from '$lib/components/TextFragmentManager.svelte';
  import CaseRelationshipAnalyzer from '$lib/components/CaseRelationshipAnalyzer.svelte';

  export let data;
  
  let caseId = $page.params.id;
  let caseDetails = data.caseDetails;
  let evidenceList = data.evidenceList || [];
  
  // UI State
  let activeTab: 'overview' | 'edit' | 'fragments' | 'relationships' | 'evidence' = 'overview';
  let showNLPInsights = false;
  let nlpAnalysis: any = null;
  let isAnalyzing = false;
  let caseEvents: any[] = [];
  let relatedCases: any[] = [];
  
  // Evidence upload
  let files: File[] = [];
  let isDragOver = false;
  let isUploading = false;
  const uploadProgress = writable(0);
  const uploadStatus = writable('');

  onMount(async () => {
    if (caseDetails) {
      // Load additional data
      await Promise.all([
        loadCaseEvents(),
        loadNLPAnalysis(),
        loadRelatedCases()
      ]);
    }
  });

  async function loadCaseEvents() {
    try {
      const response = await fetch(`/api/case-events?caseId=${caseId}&limit=10`);
      if (response.ok) {
        const result = await response.json();
        caseEvents = result.events || [];
      }
    } catch (error) {
      console.error('Failed to load case events:', error);
    }
  }

  async function loadNLPAnalysis() {
    if (!caseDetails?.description || caseDetails.description.length < 50) return;
    
    isAnalyzing = true;
    try {
      const response = await fetch('/api/nlp/analyze', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          description: caseDetails.description,
          caseId: caseDetails.id
        })
      });

      if (response.ok) {
        const result = await response.json();
        nlpAnalysis = result.analysis;
        showNLPInsights = true;
      }
    } catch (error) {
      console.error('Failed to load NLP analysis:', error);
    } finally {
      isAnalyzing = false;
    }
  }

  async function loadRelatedCases() {
    try {
      const response = await fetch(`/api/cases/merge/suggestions?caseId=${caseId}`);
      if (response.ok) {
        const result = await response.json();
        relatedCases = result.suggestions || [];
      }
    } catch (error) {
      console.error('Failed to load related cases:', error);
    }
  }

  function handleCaseUpdate(event: CustomEvent) {
    const { title, description, data: caseData } = event.detail;
    
    // Update case details
    if (caseDetails) {
      caseDetails = { ...caseDetails, title, description, data: caseData };
    }
    
    activeTab = 'overview';
  }

  function handleTextMoved(event: CustomEvent) {
    const { newDescription } = event.detail;
    if (caseDetails) {
      caseDetails.description = newDescription;
    }
  }

  function handleTextDropped(event: CustomEvent) {
    const { newDescription } = event.detail;
    if (caseDetails) {
      caseDetails.description = newDescription;
    }
  }

  async function generateReport() {
    try {
      const response = await fetch(`/api/reports?type=case&id=${caseId}`);
      if (response.ok) {
        const blob = await response.blob();
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `case-${caseId}-report.pdf`;
        a.click();
        URL.revokeObjectURL(url);
      }
    } catch (error) {
      console.error('Failed to generate report:', error);
      alert('Failed to generate report');
    }
  }

  function getStatusColor(status: string | null): string {
    if (!status) return 'badge-neutral';
    switch (status) {
      case 'active': return 'badge-success';
      case 'under_review': return 'badge-warning';
      case 'closed': return 'badge-neutral';
      case 'draft': return 'badge-ghost';
      default: return 'badge-neutral';
    }
  }

  function formatFileSize(bytes: number): string {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  // Evidence upload functions
  function handleDrop(event: DragEvent) {
    event.preventDefault();
    isDragOver = false;
    if (event.dataTransfer?.files) {
      files = [...files, ...Array.from(event.dataTransfer.files)];
    }
  }

  function handleDragOver(event: DragEvent) {
    event.preventDefault();
    isDragOver = true;
  }

  function handleDragLeave(event: DragEvent) {
    event.preventDefault();
    isDragOver = false;
  }

  function handleFileSelect(event: Event) {
    const target = event.target as HTMLInputElement;
    if (target.files) {
      files = [...files, ...Array.from(target.files)];
    }
  }

  function removeFile(index: number) {
    files = files.filter((_, i) => i !== index);
  }

  async function uploadFiles() {
    if (files.length === 0) return;
    
    isUploading = true;
    uploadStatus.set('Uploading files...');
    
    try {
      const formData = new FormData();
      files.forEach((file) => formData.append('files', file));
      formData.append('caseId', caseId);
      
      const response = await fetch(`/api/evidence/upload`, {
        method: 'POST',
        body: formData
      });
      
      if (response.ok) {
        uploadStatus.set('Upload successful!');
        files = [];
        await invalidate('data');
      } else {
        const error = await response.text();
        uploadStatus.set(`Upload failed: ${error}`);
      }
    } catch (error) {
      uploadStatus.set(`Upload failed: ${error}`);
    } finally {
      isUploading = false;
    }
  }

  async function deleteEvidence(evidenceId: string) {
    if (!confirm('Are you sure you want to delete this evidence file?')) return;
    
    try {
      const response = await fetch(`/api/evidence/${evidenceId}`, { 
        method: 'DELETE' 
      });
      
      if (response.ok) {
        await invalidate('data');
        uploadStatus.set('Evidence deleted successfully');
      } else {
        uploadStatus.set('Failed to delete evidence');
      }
    } catch (error) {
      uploadStatus.set('Error deleting evidence');
    }
  }
</script>

<svelte:head>
  <title>{caseDetails?.title || 'Case'} - WardenNet</title>
</svelte:head>

<div class="min-h-screen bg-base-200">
  <div class="container mx-auto p-4">
    
    <!-- Header with Navigation -->
    <div class="flex items-center justify-between mb-6">
      <div class="breadcrumbs text-sm">
        <ul>
          <li><a href="/cases" class="link link-hover">Cases</a></li>
          <li class="font-medium">{caseDetails?.title || 'Case Details'}</li>
        </ul>
      </div>
      
      <div class="flex gap-2">
        <button 
          class="btn btn-primary btn-sm"
          on:click={generateReport}
        >
          üìÑ Generate Report
        </button>
        <button 
          class="btn btn-outline btn-sm"
          on:click={() => goto(`/cases/${caseId}/edit`)}
        >
          ‚úèÔ∏è Edit
        </button>
      </div>
    </div>

    <!-- Case Header -->
    <div class="card bg-base-100 shadow-lg mb-6">
      <div class="card-body">
        <div class="flex items-start justify-between">
          <div>
            <h1 class="text-3xl font-bold mb-2">{caseDetails?.title || 'Untitled Case'}</h1>
            <div class="flex items-center gap-2 mb-4">
              <div class="badge {getStatusColor(caseDetails?.status)} badge-lg">
                {caseDetails?.status || 'active'}
              </div>
              {#if caseDetails?.dangerScore}
                <div class="badge badge-outline">
                  Risk: {caseDetails.dangerScore}/10
                </div>
              {/if}
              <div class="badge badge-ghost">
                ID: {caseId}
              </div>
            </div>
          </div>
          
          {#if relatedCases.length > 0}
            <div class="alert alert-info">
              <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
              </svg>
              <span class="text-sm">
                {relatedCases.length} related case{relatedCases.length > 1 ? 's' : ''} found
              </span>
            </div>
          {/if}
        </div>

        <!-- Tab Navigation -->
        <div class="tabs tabs-boxed">
          <button 
            class="tab" 
            class:tab-active={activeTab === 'overview'}
            on:click={() => activeTab = 'overview'}
          >
            üìã Overview
          </button>
          <button 
            class="tab" 
            class:tab-active={activeTab === 'edit'}
            on:click={() => activeTab = 'edit'}
          >
            ‚úèÔ∏è Edit
          </button>
          <button 
            class="tab" 
            class:tab-active={activeTab === 'fragments'}
            on:click={() => activeTab = 'fragments'}
          >
            üìù Text Fragments
          </button>
          <button 
            class="tab" 
            class:tab-active={activeTab === 'relationships'}
            on:click={() => activeTab = 'relationships'}
          >
            üîó Relationships
          </button>
          <button 
            class="tab" 
            class:tab-active={activeTab === 'evidence'}
            on:click={() => activeTab = 'evidence'}
          >
            üìé Evidence ({evidenceList.length})
          </button>
        </div>
      </div>
    </div>

    <!-- Main Content -->
    <div class="grid grid-cols-1 lg:grid-cols-4 gap-6">
      
      <!-- Left Column - Case Content -->
      <div class="lg:col-span-3 space-y-6">
        
        {#if activeTab === 'overview'}
          <!-- Case Overview -->
          <div class="card bg-base-100 shadow-lg">
            <div class="card-body">
              <h2 class="card-title">Case Description</h2>
              <div class="prose max-w-none">
                <p class="whitespace-pre-wrap text-base leading-relaxed">
                  {caseDetails?.description || 'No description available.'}
                </p>
              </div>
              
              {#if showNLPInsights && nlpAnalysis}
                <div class="divider"></div>
                <div class="bg-gradient-to-r from-primary/10 to-secondary/10 p-4 rounded-lg border border-primary/20">
                  <h3 class="font-semibold mb-3 flex items-center">
                    ü§ñ AI Analysis
                    {#if isAnalyzing}
                      <span class="loading loading-spinner loading-sm ml-2"></span>
                    {/if}
                  </h3>
                  <div class="text-sm space-y-2">
                    {#if nlpAnalysis.entities}
                      <div>
                        <strong>Key Entities:</strong> 
                        <div class="flex flex-wrap gap-1 mt-1">
                          {#each nlpAnalysis.entities as entity}
                            <span class="badge badge-primary badge-sm">{entity}</span>
                          {/each}
                        </div>
                      </div>
                    {/if}
                    {#if nlpAnalysis.confidence}
                      <div>
                        <strong>Analysis Confidence:</strong> 
                        <span class="badge badge-outline">{Math.round(nlpAnalysis.confidence * 100)}%</span>
                      </div>
                    {/if}
                    {#if nlpAnalysis.summary}
                      <div>
                        <strong>Summary:</strong> {nlpAnalysis.summary}
                      </div>
                    {/if}
                  </div>
                </div>
              {/if}
            </div>
          </div>
        
        {:else if activeTab === 'edit'}
          <!-- Enhanced Case Form -->
          <div class="card bg-base-100 shadow-lg">
            <div class="card-body">
              <h2 class="card-title">Edit Case</h2>
              <EnhancedCaseForm 
                existingCase={caseDetails}
                isEditing={true}
                on:saved={handleCaseUpdate}
                on:cancel={() => activeTab = 'overview'}
              />
            </div>
          </div>
        
        {:else if activeTab === 'fragments'}
          <!-- Text Fragment Manager -->
          <div class="card bg-base-100 shadow-lg">
            <div class="card-body">
              <h2 class="card-title">Manage Text Fragments</h2>
              <p class="text-sm text-base-content/70 mb-4">
                Organize and move text between cases with drag-and-drop functionality.
              </p>
              <TextFragmentManager 
                {caseId}
                description={caseDetails?.description || ''}
                canEdit={true}
                on:textMoved={handleTextMoved}
                on:textDropped={handleTextDropped}
              />
            </div>
          </div>
        
        {:else if activeTab === 'relationships'}
          <!-- Case Relationship Analyzer -->
          <div class="card bg-base-100 shadow-lg">
            <div class="card-body">
              <h2 class="card-title">Case Relationships</h2>
              <p class="text-sm text-base-content/70 mb-4">
                Analyze connections and potential merges with related cases.
              </p>
              <CaseRelationshipAnalyzer 
                {caseId}
                userId={data.session?.user?.id}
                on:merge={(e) => {
                  console.log('Merge request:', e.detail);
                  // Implementation would go here
                }}
              />
            </div>
          </div>
        
        {:else if activeTab === 'evidence'}
          <!-- Evidence Management -->
          <div class="card bg-base-100 shadow-lg">
            <div class="card-body">
              <h2 class="card-title">Evidence Management</h2>
              
              <!-- Evidence Upload -->
              <div class="mb-6">
                <h3 class="text-lg font-semibold mb-4">Upload Evidence</h3>
                
                <!-- Drag and Drop Zone -->
                <div 
                  class="border-2 border-dashed border-base-300 rounded-lg p-8 text-center transition-all duration-300"
                  class:border-primary={isDragOver}
                  class:bg-primary={isDragOver}
                  class:bg-opacity-10={isDragOver}
                  on:drop={handleDrop}
                  on:dragover={handleDragOver}
                  on:dragleave={handleDragLeave}
                  role="button"
                  tabindex="0"
                >
                  {#if isUploading}
                    <div class="loading loading-spinner loading-lg"></div>
                    <p class="mt-2">Uploading files...</p>
                  {:else}
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-base-content/50 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                    </svg>
                    <p class="text-lg font-medium mb-2">Drop files here or click to upload</p>
                    <p class="text-sm text-base-content/70 mb-4">Support for documents, images, and other evidence files</p>
                    <input 
                      type="file" 
                      multiple 
                      class="file-input file-input-bordered file-input-primary w-full max-w-xs"
                      on:change={handleFileSelect}
                    />
                  {/if}
                </div>

                <!-- Selected Files -->
                {#if files.length > 0}
                  <div class="mt-4">
                    <h4 class="font-medium mb-2">Selected Files ({files.length})</h4>
                    <div class="space-y-2">
                      {#each files as file, index}
                        <div class="flex items-center justify-between p-3 bg-base-200 rounded-lg">
                          <div class="flex items-center space-x-3">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                            </svg>
                            <div>
                              <p class="font-medium">{file.name}</p>
                              <p class="text-sm text-base-content/70">{formatFileSize(file.size)}</p>
                            </div>
                          </div>
                          <button 
                            class="btn btn-ghost btn-sm text-error"
                            on:click={() => removeFile(index)}
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                          </button>
                        </div>
                      {/each}
                    </div>
                    
                    <div class="mt-4 flex gap-2">
                      <button 
                        class="btn btn-primary" 
                        class:loading={isUploading}
                        disabled={isUploading}
                        on:click={uploadFiles}
                      >
                        {isUploading ? 'Uploading...' : 'Upload Files'}
                      </button>
                      <button 
                        class="btn btn-ghost" 
                        on:click={() => files = []}
                        disabled={isUploading}
                      >
                        Clear All
                      </button>
                    </div>
                  </div>
                {/if}

                <!-- Upload Status -->
                {#if $uploadStatus}
                  <div class="mt-4">
                    <div class="alert {$uploadStatus.includes('successful') ? 'alert-success' : $uploadStatus.includes('failed') ? 'alert-error' : 'alert-info'}">
                      <span>{$uploadStatus}</span>
                    </div>
                  </div>
                {/if}
              </div>

              <!-- Evidence List -->
              <div>
                <h3 class="text-lg font-semibold mb-4">Current Evidence ({evidenceList.length})</h3>
                
                {#if evidenceList.length === 0}
                  <div class="text-center py-8 text-base-content/50">
                    <svg xmlns="http://www.w3.org/2000/svg" class="mx-auto h-12 w-12 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                    <p>No evidence files uploaded yet</p>
                  </div>
                {:else}
                  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {#each evidenceList as evidence}
                      <div class="card bg-base-200 shadow">
                        <div class="card-body p-4">
                          <h4 class="card-title text-sm">{evidence.filename || evidence.title || 'Unknown File'}</h4>
                          <div class="text-xs space-y-1">
                            {#if evidence.fileType}
                              <p><span class="badge badge-outline badge-xs">{evidence.fileType}</span></p>
                            {/if}
                            <p>Size: {formatFileSize(evidence.fileSize || 0)}</p>
                            <p>Uploaded: {evidence.createdAt ? new Date(evidence.createdAt).toLocaleDateString() : 'N/A'}</p>
                            <p>By: {evidence.uploadedBy || 'Unknown'}</p>
                          </div>
                          <div class="card-actions justify-end mt-2">
                            {#if evidence.fileUrl}
                              <a href={evidence.fileUrl} target="_blank" class="btn btn-primary btn-xs">
                                View
                              </a>
                            {/if}
                            <button 
                              class="btn btn-ghost btn-xs text-error" 
                              on:click={() => deleteEvidence(evidence.id)}
                            >
                              Delete
                            </button>
                          </div>
                        </div>
                      </div>
                    {/each}
                  </div>
                {/if}
              </div>
            </div>
          </div>
        {/if}
      </div>

      <!-- Right Column - Sidebar -->
      <div class="space-y-6">
        
        <!-- Case Stats -->
        <div class="card bg-base-100 shadow-lg">
          <div class="card-body">
            <h3 class="card-title text-lg">üìä Case Stats</h3>
            <div class="stats stats-vertical shadow">
              <div class="stat">
                <div class="stat-title">Evidence Files</div>
                <div class="stat-value text-primary">{evidenceList.length}</div>
              </div>
              <div class="stat">
                <div class="stat-title">Total Size</div>
                <div class="stat-value text-sm">
                  {formatFileSize(evidenceList.reduce((sum, e) => sum + (e.fileSize || 0), 0))}
                </div>
              </div>
              <div class="stat">
                <div class="stat-title">Created</div>
                <div class="stat-value text-sm">
                  {caseDetails?.createdAt ? new Date(caseDetails.createdAt).toLocaleDateString() : 'N/A'}
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Case Events Timeline -->
        {#if caseEvents.length > 0}
          <div class="card bg-base-100 shadow-lg">
            <div class="card-body">
              <h3 class="card-title text-lg">üìÖ Recent Activity</h3>
              <div class="space-y-3">
                {#each caseEvents.slice(0, 5) as event}
                  <div class="flex items-start gap-2">
                    <div class="badge badge-xs badge-primary mt-1"></div>
                    <div class="flex-1 text-xs">
                      <div class="font-medium">{event.eventType?.replace('_', ' ') || 'Event'}</div>
                      <div class="text-base-content/70">
                        {event.timestamp ? new Date(event.timestamp).toLocaleDateString() : ''}
                      </div>
                    </div>
                  </div>
                {/each}
                {#if caseEvents.length > 5}
                  <button class="btn btn-ghost btn-xs w-full">View All Activity</button>
                {/if}
              </div>
            </div>
          </div>
        {/if}

        <!-- Related Cases -->
        {#if relatedCases.length > 0}
          <div class="card bg-base-100 shadow-lg">
            <div class="card-body">
              <h3 class="card-title text-lg">üîó Related Cases</h3>
              <div class="space-y-2">
                {#each relatedCases.slice(0, 3) as related}
                  <div class="p-2 bg-base-200 rounded cursor-pointer hover:bg-base-300 transition-colors">
                    <div class="font-medium text-sm truncate">{related.case?.title || 'Untitled Case'}</div>
                    <div class="text-xs text-base-content/70">
                      {Math.round((related.similarity || 0) * 100)}% similarity
                    </div>
                  </div>
                {/each}
                {#if relatedCases.length > 3}
                  <button 
                    class="btn btn-ghost btn-xs w-full"
                    on:click={() => activeTab = 'relationships'}
                  >
                    View All Related Cases
                  </button>
                {/if}
              </div>
            </div>
          </div>
        {/if}

        <!-- Quick Actions -->
        <div class="card bg-base-100 shadow-lg">
          <div class="card-body">
            <h3 class="card-title text-lg">‚ö° Quick Actions</h3>
            <div class="space-y-2">
              <button 
                class="btn btn-outline btn-sm w-full" 
                on:click={() => activeTab = 'edit'}
              >
                ‚úèÔ∏è Edit Case
              </button>
              <button 
                class="btn btn-outline btn-sm w-full" 
                on:click={generateReport}
              >
                üìÑ Generate Report
              </button>
              <button class="btn btn-outline btn-sm w-full">
                üìã Clone Case
              </button>
              <button class="btn btn-outline btn-sm w-full">
                üóÇÔ∏è Archive Case
              </button>
              <button 
                class="btn btn-outline btn-sm w-full"
                on:click={() => goto('/cases')}
              >
                üîô Back to Cases
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
