[package]
name = "deeds-app-tauri"
version = "0.1.0"
description = "Legal RAG System with rust-bert and pgvector"
authors = ["Legal Tech Team"]
license = "MIT"
repository = "https://github.com/legal-tech/deeds-app"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[build-dependencies]
tauri-build = { version = "1.0", features = [] }

[dependencies]
# Tauri core
tauri = { version = "1.0", features = ["api-all"] }
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"

# Rust-BERT and ML dependencies
rust-bert = "0.22.0"
tch = "0.14.0"  # PyTorch bindings for rust-bert
candle-core = "0.3.0"  # Alternative ML framework
candle-nn = "0.3.0"
candle-transformers = "0.3.0"

# HTTP client for model downloads
reqwest = { version = "0.11", features = ["json", "stream"] }
tokio = { version = "1.0", features = ["full"] }

# Async and concurrency
once_cell = "1.19"
futures = "0.3"
async-trait = "0.1"

# Database and storage
rusqlite = { version = "0.29", features = ["bundled"] }
sqlx = { version = "0.7", features = ["runtime-tokio-rustls", "postgres", "chrono", "uuid"] }

# Vector operations
ndarray = "0.15"
nalgebra = "0.32"
faiss = { version = "0.11", optional = true }  # Optional FAISS integration

# Utilities
uuid = { version = "1.0", features = ["v4", "serde"] }
chrono = { version = "0.4", features = ["serde"] }
anyhow = "1.0"
thiserror = "1.0"
log = "0.4"
env_logger = "0.10"

# Crypto and hashing
sha2 = "0.10"
blake3 = "0.8"

# Configuration
config = "0.13"
toml = "0.8"

# Optional features for advanced functionality
[dependencies.candle-core]
version = "0.3.0"
optional = true

[dependencies.ort]
version = "1.16"
optional = true
features = ["cuda", "tensorrt"]

[features]
default = ["local-models"]
local-models = []
cloud-models = []
gpu-acceleration = ["tch/cuda"]
faiss-integration = ["faiss"]
onnx-runtime = ["ort"]
candle-backend = ["candle-core", "candle-nn", "candle-transformers"]

# Build optimizations
[profile.release]
opt-level = 3
lto = true
codegen-units = 1
panic = "abort"

[profile.dev]
opt-level = 0
debug = true

# Platform-specific configurations
[target.'cfg(windows)'.dependencies]
winapi = { version = "0.3", features = ["winuser", "winbase"] }

[target.'cfg(target_os = "macos")'.dependencies]
objc = "0.2"

[target.'cfg(target_os = "linux")'.dependencies]
libc = "0.2"

# Workspace configuration
[workspace]
members = [
    ".",
    "crates/legal-bert",
    "crates/vector-db",
    "crates/embedding-service"
]

# Legal-BERT specific crate
[dependencies.legal-bert]
path = "crates/legal-bert"
optional = true

# Vector database crate
[dependencies.vector-db]
path = "crates/vector-db"
optional = true

# Embedding service crate
[dependencies.embedding-service]
path = "crates/embedding-service"
optional = true

# Documentation
[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

# Security audit
[package.metadata.audit]
ignore = []

# Cargo-deny configuration
[package.metadata.deny]
targets = [
    { triple = "x86_64-unknown-linux-gnu" },
    { triple = "x86_64-pc-windows-msvc" },
    { triple = "x86_64-apple-darwin" },
    { triple = "aarch64-apple-darwin" }
]

# Environment-specific features
[features]
# Development features
dev = ["local-models", "candle-backend"]

# Production features with optimizations
prod = ["local-models", "gpu-acceleration", "faiss-integration"]

# Full feature set for comprehensive deployment
full = [
    "local-models", 
    "cloud-models", 
    "gpu-acceleration", 
    "faiss-integration", 
    "onnx-runtime",
    "candle-backend"
]
